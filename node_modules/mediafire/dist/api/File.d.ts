import * as MF from '../types/File';
import { Client } from '../lib/client';
export declare class File extends Client {
    host?: string | undefined;
    token?: string | undefined;
    constructor(host?: string | undefined, token?: string | undefined);
    /**
     * Returns a list of the file's details.
     * This call will return the quickkey, filename,
     * creation date, description, status, size, etc.
     *
     * @param quickKey - The quickkey that identifies the file.
     * You can also specify multiple quickkeys separated by commas.
     * The maximum number of quickkeys allowed is 500.
     * Responses for one-time keys will not include quickkey.
     */
    getInfo(quickKey: string): Promise<MF.FileInfo>;
    /**
     * Updates a file's information.
     */
    update(): Promise<MF.FileUpdated>;
    /**
     * Moves one or more files from one location to another
     */
    move(quickKey: string, folderKey: string): Promise<MF.FileMoved>;
    /**
     * Copies one or more files from one location to another
     */
    copy(): Promise<MF.FileCopied>;
    /**
     * Deletes one or more session user files by setting the
     * files' deleteDate property and moving the files to the trash can.
     * The file is still accessible in the trash can
     */
    delete(): Promise<MF.FileDeleted>;
    /**
     * Permanently deletes one or more files
     */
    purge(): Promise<MF.FilePurged>;
    /**
     * Returns a list of quickkeys of the recently modified files
     *
     * @param numberOfFiles - Indicates the number of quickkeys to be returned. 10 (default)
     */
    recentlyModified(numberOfFiles: number): Promise<MF.FileRecentlyModified>;
    /**
     * Download multiple files at once by packaging the files into a ZIP container
     */
    zip(): Promise<MF.FileZip>;
}
