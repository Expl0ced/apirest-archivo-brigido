"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Device = void 0;
var client_1 = require("../lib/client");
var Device = /** @class */ (function (_super) {
    __extends(Device, _super);
    function Device(host, token) {
        var _this = _super.call(this, 'device', host, token) || this;
        _this.host = host;
        _this.token = token;
        return _this;
    }
    /**
     * Returns the list of all files and folders with revisions greater than the
     * passed parameter revision and less than or equal to the next 500-multiplier.
     *
     * @param revision - The device revision after which the changes to be returned occur
     * @param deviceId - The ID of the device. If not passed, it uses the cloud device
     */
    Device.prototype.getChanges = function (revision, deviceId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.post('get_changes.php', {
                            revision: revision, deviceId: deviceId,
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Gets information about resources shared with the current user.
     *
     * @param type - Filter foreign resources by resource type
     * @param chunk - Which segment of the data to return
     * @param reverse - If one, sort descending; otherwise, ascending
     * @param sortBy - Key of the column by which to sort
     * @param filter - Filter foreign resources by file type
     */
    Device.prototype.getForeignResources = function (type, chunk, reverse, sortBy, filter) {
        if (chunk === void 0) { chunk = 0; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.post('get_foreign_resources.php', {
                            chunk: chunk, type: type, sortBy: sortBy, reverse: reverse, filter: filter,
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns various information about the status of a device specified by device_id.
     *
     * @param deviceId - The ID of the device. If not passed, it uses the cloud device
     * @param simpleReport - Omits async_jobs_in_progress and async_job_types from the response
     */
    Device.prototype.getStatus = function (simpleReport, deviceId) {
        if (simpleReport === void 0) { simpleReport = true; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.post('get_status.php', {
                            deviceId: deviceId, simpleReport: simpleReport,
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * Returns the trash can folder data and the list of immediate files and folders
     * in the trash can. Contents of subfolders in the trash can will not be returned.
     *
     * @param chunk - Which segment of the data to return
     * @param contentType - Filter foreign resources by resource type
     * @param deviceId - The ID of the device. If not passed, it uses the cloud device
     */
    Device.prototype.getTrash = function (contentType, chunk, deviceId) {
        if (chunk === void 0) { chunk = 0; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.post('get_trash.php', {
                            chunk: chunk, contentType: contentType, deviceId: deviceId,
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    return Device;
}(client_1.Client));
exports.Device = Device;
